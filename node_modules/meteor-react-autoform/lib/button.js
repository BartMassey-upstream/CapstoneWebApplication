'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _FlatButton = require('material-ui/FlatButton');

var _FlatButton2 = _interopRequireDefault(_FlatButton);

var _RaisedButton = require('material-ui/RaisedButton');

var _RaisedButton2 = _interopRequireDefault(_RaisedButton);

var _FontIcon = require('material-ui/FontIcon');

var _FontIcon2 = _interopRequireDefault(_FontIcon);

var _IconButton = require('material-ui/IconButton');

var _IconButton2 = _interopRequireDefault(_IconButton);

var _reactHelmet = require('react-helmet');

var _reactHelmet2 = _interopRequireDefault(_reactHelmet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by josh.welham on 21/06/16.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var Button = function (_React$Component) {
  _inherits(Button, _React$Component);

  function Button(props) {
    _classCallCheck(this, Button);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Button).call(this, props));
  }

  _createClass(Button, [{
    key: 'buttonProps',
    value: function buttonProps() {
      return {
        disabled: true,
        icon: this.icon(),
        label: this.props.label,
        labelPosition: 'before',
        primary: this.isPrimary()
      };
    }
  }, {
    key: 'isPrimary',
    value: function isPrimary() {
      if (typeof this.props.extraProps === 'undefined') {
        return true;
      } else if (this.props.extraProps.secondary) {
        return false;
      }

      return true;
    }
  }, {
    key: 'icon',
    value: function icon() {
      if (this.props.icon) {
        return _react2.default.createElement(
          _FontIcon2.default,
          { className: 'material-icons' },
          this.props.icon
        );
      }

      return null;
    }
  }, {
    key: 'button',
    value: function button() {
      switch (this.props.type) {
        case 'FlatButton':
          return this.flatButton();
        case 'IconButton':
          return this.iconButton();
        case 'RaisedButton':
        default:
          return this.raisedButton();
      }
    }
  }, {
    key: 'flatButton',
    value: function flatButton() {
      return _react2.default.createElement(_FlatButton2.default, _extends({}, this.buttonProps(), this.props.extraProps, { type: 'submit' }));
    }
  }, {
    key: 'iconButton',
    value: function iconButton() {
      return _react2.default.createElement(
        _IconButton2.default,
        _extends({}, this.buttonProps(), { type: 'submit' }),
        this.icon()
      );
    }
  }, {
    key: 'raisedButton',
    value: function raisedButton() {
      return _react2.default.createElement(_RaisedButton2.default, _extends({}, this.buttonProps(), this.props.extraProps, { type: 'submit' }));
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { style: this.props.buttonParentStyle },
        _react2.default.createElement(_reactHelmet2.default, {
          link: [{ rel: 'stylesheet', href: 'https://fonts.googleapis.com/icon?family=Material+Icons' }]
        }),
        this.button()
      );
    }
  }]);

  return Button;
}(_react2.default.Component);

Button.propTypes = {
  buttonParentStyle: _react2.default.PropTypes.object,
  extraProps: _react2.default.PropTypes.object,
  icon: _react2.default.PropTypes.string,
  label: _react2.default.PropTypes.string,
  type: _react2.default.PropTypes.oneOf(['FlatButton', 'RaisedButton', 'IconButton'])
};

Button.defaultProps = {
  label: 'Submit',
  type: 'RaisedButton'
};

exports.default = Button;