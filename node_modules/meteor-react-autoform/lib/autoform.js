'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _DatePicker = require('material-ui/DatePicker');

var _DatePicker2 = _interopRequireDefault(_DatePicker);

var _TextField = require('material-ui/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _Toggle = require('material-ui/Toggle');

var _Toggle2 = _interopRequireDefault(_Toggle);

var _Checkbox = require('material-ui/Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _SelectField = require('material-ui/SelectField');

var _SelectField2 = _interopRequireDefault(_SelectField);

var _MenuItem = require('material-ui/MenuItem');

var _MenuItem2 = _interopRequireDefault(_MenuItem);

var _RadioButton = require('material-ui/RadioButton');

var _lightBaseTheme = require('material-ui/styles/baseThemes/lightBaseTheme');

var _lightBaseTheme2 = _interopRequireDefault(_lightBaseTheme);

var _getMuiTheme = require('material-ui/styles/getMuiTheme');

var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);

var _errors = require('./errors');

var _errors2 = _interopRequireDefault(_errors);

var _button = require('./button');

var _button2 = _interopRequireDefault(_button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by josh.welham on 15/03/2016.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

/**
 * Class to translate SimpleSchema to Material-UI fields
 */

var ReactAutoForm = function (_React$Component) {
  _inherits(ReactAutoForm, _React$Component);

  function ReactAutoForm(props) {
    _classCallCheck(this, ReactAutoForm);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ReactAutoForm).call(this, props));

    _this.state = {};
    _this.fields = {};
    _this.handleSubmit = _this.handleSubmit.bind(_this);
    return _this;
  }

  _createClass(ReactAutoForm, [{
    key: 'getChildContext',
    value: function getChildContext() {
      if (this.props.muiTheme) {
        return {
          muiTheme: (0, _getMuiTheme2.default)(_lightBaseTheme2.default)
        };
      }
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(props, state) {
      this.stateUpdated(state);
    }
  }, {
    key: 'processErrors',
    value: function processErrors() {
      var _this2 = this;

      this.mappedErrors = {};

      if (this.props.errors) {
        this.props.errors.map(function (error) {
          _this2.mappedErrors[error.name] = error.message;
        });
      }
    }

    /**
      * Process each field from the schema
      * @param field
      * @param fieldName
      * @returns {*}
      */

  }, {
    key: 'processField',
    value: function processField(field, fieldName) {
      if (this.props.useFields && this.props.useFields.indexOf(fieldName) === -1) {
        return null;
      }

      this.fields[fieldName] = field;
      this.fields[fieldName].key = fieldName;
      this.createDefaultAttr(fieldName);
      var component = void 0;

      if (this.fields[fieldName].allowedValues) // If we're restricting the values to a list it's a dropdown
        {
          return this.switchComponent(fieldName);
        }

      switch (this.fields[fieldName].type.name) {// Switch between what type of field it is to use different types of Material -UI component

        case 'Date':
          component = this.typeDate(fieldName);
          break;

        case 'Number':
          component = this.typeNumber(fieldName);
          break;

        case 'Boolean':
          component = this.typeCheckbox(fieldName);
          break;

        case 'String':
          component = this.typeString(fieldName);
          break;
      }

      return component;
    }
  }, {
    key: 'switchComponent',
    value: function switchComponent(fieldName) {
      var component = void 0;

      if (this.fields[fieldName].attributes && this.fields[fieldName].attributes.options || this.fields[fieldName].allowedValues) {
        switch (this.fields[fieldName].materialForm.switcher) {
          case 'Radio':
            component = this.componentRadio(fieldName);
            break;

          default:
            component = this.typeDropdown(fieldName);
            break;
        }
      } else {
        console.error('Autoform Error:', 'You must provide either \'' + fieldName + '.allowedValues\' or \'' + fieldName + '.materialForm.options\' to have a Radio or Dropdown component.');
        component = this.componentTextField(fieldName);
      }

      return component;
    }

    /**
      * Translate the SimpleSchema top-level attributes to Material-UI attributes
      * This is so the developer doesn't have to write the
      * @param fieldName
      */

  }, {
    key: 'createDefaultAttr',
    value: function createDefaultAttr(fieldName) {
      this.fields[fieldName].materialForm = this.fields[fieldName].materialForm ? this.fields[fieldName].materialForm : {};
      this.getFieldParentStyle(fieldName);
      this.fields[fieldName].attributes = {}; // These will be overwritten if it's repeated in the materialForm object (ie `materialForm.floatingLabelText`)
      this.fields[fieldName].attributes.name = fieldName;
      this.getSchemaValue(fieldName, 'label', 'floatingLabelText');
      this.getSchemaValue(fieldName, 'max', 'maxLength');
      this.getSchemaMaterialForm(fieldName);
    }
  }, {
    key: 'getFieldParentStyle',
    value: function getFieldParentStyle(fieldName) {
      var _this3 = this;

      if (this.fields[fieldName].materialForm && this.fields[fieldName].materialForm.parentStyle) // If there is a parentStyle
        {
          this.fields[fieldName].parentStyle = {};

          Object.keys(this.fields[fieldName].materialForm.parentStyle).map(function (key) // For each `materialForm.parentStyle` field
          {
            _this3.fields[fieldName].parentStyle[key] = _this3.fields[fieldName].materialForm.parentStyle[key]; // Store it in our parent component style
          });

          delete this.fields[fieldName].materialForm.parentStyle; // We've stored it in the correct place so delete it so it's not used later
        }
    }

    /**
     * Store all of the `materialForm` attributes
     * @param fieldName
     */

  }, {
    key: 'getSchemaMaterialForm',
    value: function getSchemaMaterialForm(fieldName) {
      var _this4 = this;

      Object.keys(this.fields[fieldName].materialForm).map(function (key) // For each `materialForm` field
      {
        _this4.fields[fieldName].attributes[key] = _this4.fields[fieldName].materialForm[key]; // Store it in our component attributes
      });
    }

    /**
     *
     * @param fieldName
     * @param fieldColumn
     * @param materialField
     */

  }, {
    key: 'getSchemaValue',
    value: function getSchemaValue(fieldName, fieldColumn) {
      var materialField = arguments.length <= 2 || arguments[2] === undefined ? fieldColumn : arguments[2];

      // If the `fieldColumn` exists, store it in our `materialField` attributes otherwise null
      if (typeof this.fields[fieldName][fieldColumn] !== 'undefined') {
        this.fields[fieldName].attributes[materialField] = this.fields[fieldName][fieldColumn];
        return;
      }

      this.fields[fieldName].attributes[materialField] = null;
    }

    /**
      * Remove an attributes value by Nulling it
      * @param fieldName
      * @param field
      */

  }, {
    key: 'removeMaterialSchemaValue',
    value: function removeMaterialSchemaValue(fieldName, field) {
      this.fields[fieldName].attributes[field] = null;
    }

    /**
      * Move a value to our new field and then remove the original field by Nulling it
      * @param fieldName
      * @param newField
      * @param oldField
      */

  }, {
    key: 'moveMaterialSchemaValue',
    value: function moveMaterialSchemaValue(fieldName, newField, oldField) {
      this.fields[fieldName].attributes[newField] = this.fields[fieldName].attributes[oldField]; // Copy the oldField value to the newField value
      this.fields[fieldName].attributes[oldField] = null; // And now remove the oldField by Nulling
    }

    /**
      * A normal string field
      * @param fieldName
      * @returns {XML}
      */

  }, {
    key: 'typeString',
    value: function typeString(fieldName) {
      if (this.fields[fieldName].materialForm.switcher) {
        return this.switchComponent(fieldName);
      }

      // We don't need to change anything here so go straight to the input text
      return this.componentTextField(fieldName);
    }

    /**
      * Date component
      * http://www.material-ui.com/#/components/date-picker
      * @param fieldName
      * @returns {XML}
      */

  }, {
    key: 'typeDate',
    value: function typeDate(fieldName) {
      var _this5 = this;

      this.moveMaterialSchemaValue(fieldName, 'hintText', 'floatingLabelText');

      this.fields[fieldName].attributes.defaultDate = this.fields[fieldName].defaultValue;
      this.fields[fieldName].attributes.value = this.getStateOrDefaultSchemaValue(fieldName, '');
      this.fields[fieldName].attributes.onChange = function (e, date) {
        _this5.setState(_defineProperty({}, fieldName + '_fieldValue', date));
      };

      return _react2.default.createElement(
        'div',
        { key: this.fields[fieldName].key, style: this.fields[fieldName].parentStyle },
        _react2.default.createElement(_DatePicker2.default, this.fields[fieldName].attributes)
      );
    }

    /**
      * Input type number
      * @param fieldName
      * @returns {XML}
      */

  }, {
    key: 'typeNumber',
    value: function typeNumber(fieldName) {
      this.fields[fieldName].attributes.type = 'number'; // Change the input type to number
      this.getSchemaValue(fieldName, 'max'); // Set the max [and min] of the number input
      this.getSchemaValue(fieldName, 'min');

      return this.componentTextField(fieldName);
    }

    /**
      * Logic to get the correct checkbox type component
      * @param fieldName
      * @returns {XML}
      */

  }, {
    key: 'typeCheckbox',
    value: function typeCheckbox(fieldName) {
      this.moveMaterialSchemaValue(fieldName, 'label', 'floatingLabelText');
      var component = void 0;

      switch (this.fields[fieldName].materialForm.switcher) {
        case 'Toggle':
          this.removeMaterialSchemaValue(fieldName, 'switcher');
          component = this.componentToggle(fieldName);
          break;

        case 'Checkbox':
        default:
          this.removeMaterialSchemaValue(fieldName, 'switcher');
          component = this.componentCheckbox(fieldName);
          break;
      }

      return component;
    }

    /**
      *
      * @param fieldName
      * @returns {XML}
      */

  }, {
    key: 'typeDropdown',
    value: function typeDropdown(fieldName) {
      var _this6 = this;

      var options = this.getSchemaAllowValues(fieldName);
      var selectOptions = this.fields[fieldName].attributes.selectOptions;

      selectOptions = selectOptions ? selectOptions : {};
      selectOptions.key = this.fields[fieldName].attributes.name;
      selectOptions.floatingLabelText = this.fields[fieldName].attributes.floatingLabelText;
      selectOptions.errorText = this.mappedErrors[fieldName];
      selectOptions.defaultValue = this.getSchemaDefaultValue(fieldName, '');
      selectOptions.value = this.getStateOrDefaultSchemaValue(fieldName, '');
      selectOptions.onChange = function (e, index, value) {
        _this6.setState(_defineProperty({}, fieldName + '_fieldValue', value));
      };

      return _react2.default.createElement(
        _SelectField2.default,
        selectOptions,
        Object.keys(options).map(function (i) {
          return _react2.default.createElement(_MenuItem2.default, { key: options[i].value, label: options[i].label, primaryText: options[i].label, value: options[i].value });
        })
      );
    }

    /**
      * This will be used for either a text, password, number or textarea input field
      * http://www.material-ui.com/#/components/text-field
      * @param fieldName
      * @returns {XML}
      */

  }, {
    key: 'componentTextField',
    value: function componentTextField(fieldName) {
      var _this7 = this;

      this.fields[fieldName].attributes.errorText = this.mappedErrors[fieldName];
      this.fields[fieldName].attributes.value = this.getStateOrDefaultSchemaValue(fieldName, '');
      this.fields[fieldName].attributes.onChange = function (e) {
        if (e.target.value !== '') {
          _this7.setState(_defineProperty({}, fieldName + '_fieldValue', _this7.fields[fieldName].attributes.type === 'number' ? Number(e.target.value) : e.target.value));
        } else {
          _this7.setState(_defineProperty({}, fieldName + '_fieldValue', _this7.getStateOrDefaultSchemaValue(fieldName, '', true)));
        }
      };

      return _react2.default.createElement(
        'div',
        { key: this.fields[fieldName].key, style: this.fields[fieldName].parentStyle },
        _react2.default.createElement(_TextField2.default, this.fields[fieldName].attributes)
      );
    }

    /**
      * Toggle component
      * http://www.material-ui.com/#/components/toggle
      * @param fieldName
      * @returns {XML}
      */

  }, {
    key: 'componentToggle',
    value: function componentToggle(fieldName) {
      var _this8 = this;

      this.fields[fieldName].attributes.defaultToggled = this.fields[fieldName].defaultValue;
      this.fields[fieldName].attributes.toggled = this.getStateOrDefaultSchemaValue(fieldName, false);
      this.fields[fieldName].attributes.onToggle = function (e) {
        _this8.setState(_defineProperty({}, fieldName + '_fieldValue', e.target.checked));
      };

      return _react2.default.createElement(
        'div',
        { key: this.fields[fieldName].key, style: this.fields[fieldName].parentStyle },
        _react2.default.createElement(_Toggle2.default, this.fields[fieldName].attributes)
      );
    }

    /**
     * Checkbox component
     * http://www.material-ui.com/#/components/checkbox
     * @param fieldName
     * @returns {XML}
     */

  }, {
    key: 'componentCheckbox',
    value: function componentCheckbox(fieldName) {
      var _this9 = this;

      this.fields[fieldName].attributes.checked = this.getStateOrDefaultSchemaValue(fieldName, false);
      this.fields[fieldName].attributes.onCheck = function (e) {
        _this9.setState(_defineProperty({}, fieldName + '_fieldValue', e.target.checked));
      };

      return _react2.default.createElement(
        'div',
        { key: this.fields[fieldName].key, style: this.fields[fieldName].parentStyle },
        _react2.default.createElement(_Checkbox2.default, this.fields[fieldName].attributes)
      );
    }

    /**
      * Radio component
      * http://www.material-ui.com/#/components/radio-button
      * @param fieldName
      * @returns {XML}
      */

  }, {
    key: 'componentRadio',
    value: function componentRadio(fieldName) {
      var _this10 = this;

      var options = this.getSchemaAllowValues(fieldName);
      var groupOptions = this.fields[fieldName].attributes.groupOptions;

      groupOptions = groupOptions ? groupOptions : {};
      groupOptions.name = this.fields[fieldName].key;
      groupOptions.valueSelected = this.getStateOrDefaultSchemaValue(fieldName, '');
      groupOptions.onChange = function (e, value) {
        _this10.setState(_defineProperty({}, fieldName + '_fieldValue', value));
      };

      return _react2.default.createElement(
        'div',
        { key: this.fields[fieldName].key, style: this.fields[fieldName].parentStyle },
        _react2.default.createElement(
          'label',
          null,
          this.fields[fieldName].attributes.floatingLabelText
        ),
        _react2.default.createElement(
          _RadioButton.RadioButtonGroup,
          groupOptions,
          Object.keys(options).map(function (i) {
            return _react2.default.createElement(_RadioButton.RadioButton, _extends({ key: options[i].value }, options[i]));
          })
        )
      );
    }

    /**
      * Get the option values from the schema - Used for radio and select inputs
      * @param fieldName
      * @returns {Array}
      */

  }, {
    key: 'getSchemaAllowValues',
    value: function getSchemaAllowValues(fieldName) {
      var options = this.fields[fieldName].attributes.options;
      var allowedValues = options ? options : this.fields[fieldName].allowedValues;

      return Object.keys(allowedValues).map(function (key) {
        if (_typeof(allowedValues[key]) === 'object') {
          allowedValues[key].value = allowedValues[key].value.toString();
          return allowedValues[key];
        }

        return { label: allowedValues[key], value: allowedValues[key].toString() };
      });
    }

    /**
      * Submit handler - Submit button was clicked or enter was pressed
      * @param event
      */

  }, {
    key: 'handleSubmit',
    value: function handleSubmit(event) {
      event.preventDefault();

      var formFields = this.getForumFields();

      if (this.props.doc) {
        this.log(false, 'Form submitted `' + this.props.doc._id + '`:', formFields);
        this.props.onSubmit(this.props.doc._id, formFields, this.props.onSubmitExtra);
      } else {
        this.log(false, 'Form submitted:', formFields);
        this.props.onSubmit(formFields, this.props.onSubmitExtra);
      }
    }
  }, {
    key: 'getForumFields',
    value: function getForumFields() {
      var _this11 = this;

      var state = arguments.length <= 0 || arguments[0] === undefined ? this.state : arguments[0];

      var formFields = {};

      // Loop through each schema object to build the $formFields which is then used to submit the form
      Object.keys(this.props.schema).map(function (fieldName) {
        if (typeof state[fieldName + '_fieldValue'] !== 'undefined' && !(_this11.props.type === 'insert' && state[fieldName + '_fieldValue'] === '') && _this11.getDocumentValue(fieldName) !== _this11.getStateOrDefaultSchemaValue(fieldName, null, null, state)) {
          formFields[fieldName] = _this11.getStateOrDefaultSchemaValue(fieldName, null, null, state); // Gets the state value
        }
      });

      return formFields;
    }

    /**
      * Console.log
      * @param force
      * @param msg
      */

  }, {
    key: 'log',
    value: function log(force) {
      if (force || this.props.debug) {
        var _console;

        for (var _len = arguments.length, msg = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          msg[_key - 1] = arguments[_key];
        }

        (_console = console).warn.apply(_console, msg);
      }
    }

    /**
      * Reset the entire form to default
      */

  }, {
    key: 'resetForm',
    value: function resetForm() {
      var changeStates = {};

      Object.keys(this.props.schema).map(function (fieldName) {
        changeStates[fieldName + '_fieldValue'] = null;
      });

      this.setState(changeStates);
      this.stateUpdated();
    }

    /**
      * Used to get an inputs value, it will attempt to return a value that exists (in order):
      *  1. The state value
      *  2. Document value
      *    1. If it's an int, return it as a String value
      *    2. Return normal String value
      *  3. Default value
      * @param fieldName
      * @param ourDefaultValue
      * @param ignoreState
      * @param state
      * @returns {*}
      */

  }, {
    key: 'getStateOrDefaultSchemaValue',
    value: function getStateOrDefaultSchemaValue(fieldName) {
      var ourDefaultValue = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
      var ignoreState = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
      var state = arguments.length <= 3 || arguments[3] === undefined ? this.state : arguments[3];

      // If the state value exists
      if (typeof state[fieldName + '_fieldValue'] !== 'undefined' && state[fieldName + '_fieldValue'] !== null && !ignoreState) {
        // Return the state value
        return state[fieldName + '_fieldValue'];
      }
      // Else if we're updating an existing document and the value exists here
      else if (this.doesDocumentValueExist(fieldName) && !ignoreState) {
          return this.getDocumentValue(fieldName);
        }

      // Else just return the Schema default value OR my hard-coded default value
      return typeof this.fields[fieldName].defaultValue !== 'undefined' ? this.fields[fieldName].defaultValue : ourDefaultValue;
    }
  }, {
    key: 'doesDocumentValueExist',
    value: function doesDocumentValueExist(fieldName) {
      // If we're updating an existing document and the value exists here
      return this.props.type === 'update' && typeof this.props.doc[fieldName] !== 'undefined' && this.props.doc[fieldName] !== null;
    }
  }, {
    key: 'getDocumentValue',
    value: function getDocumentValue(fieldName) {
      if (this.doesDocumentValueExist(fieldName)) {
        // If it's a number
        if (!isNaN(parseFloat(this.props.doc[fieldName])) && isFinite(this.props.doc[fieldName])) {
          // Return it as a String
          return this.props.doc[fieldName].toString();
        }

        return this.props.doc[fieldName];
      }

      return false;
    }
  }, {
    key: 'stateUpdated',
    value: function stateUpdated(state) {
      this.props.buttonProps.disabled = Object.keys(this.getForumFields(state)).length === 0;
    }
  }, {
    key: 'getSchemaDefaultValue',
    value: function getSchemaDefaultValue(fieldName, ourDefaultValue) {
      return typeof this.fields[fieldName].defaultValue !== 'undefined' ? this.fields[fieldName].defaultValue : ourDefaultValue;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this12 = this;

      this.processErrors();

      return _react2.default.createElement(
        'div',
        null,
        this.props.errors ? _react2.default.createElement(_errors2.default, { errors: this.props.errors, style: this.props.errorsStyle, title: this.props.errorsTitle }) : null,
        _react2.default.createElement(
          'form',
          { className: this.props.formClass, onSubmit: this.handleSubmit, style: this.props.formStyle },
          Object.keys(this.props.schema).map(function (fieldName) {
            // Loop through each schema object
            return _this12.processField(_this12.props.schema[fieldName], fieldName); // Return the form element
          }),
          this.props.buttonComponent ? this.props.buttonComponent : _react2.default.createElement(_button2.default, {
            buttonParentStyle: this.props.buttonParentStyle,
            extraProps: this.props.buttonProps,
            icon: this.props.buttonIcon,
            label: this.props.buttonLabel,
            type: this.props.buttonType
          })
        )
      );
    }
  }]);

  return ReactAutoForm;
}(_react2.default.Component);

ReactAutoForm.propTypes = {
  buttonComponent: _react2.default.PropTypes.node,
  buttonIcon: _react2.default.PropTypes.string,
  buttonLabel: _react2.default.PropTypes.string,
  buttonParentStyle: _react2.default.PropTypes.object,
  buttonProps: _react2.default.PropTypes.object,
  buttonType: _react2.default.PropTypes.oneOf(['FlatButton', 'RaisedButton', 'IconButton']),
  debug: _react2.default.PropTypes.bool,
  doc: _react2.default.PropTypes.object,
  errors: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.bool, _react2.default.PropTypes.array]),
  errorsStyle: _react2.default.PropTypes.object,
  errorsTitle: _react2.default.PropTypes.string,
  formClass: _react2.default.PropTypes.string,
  formStyle: _react2.default.PropTypes.object,
  muiTheme: _react2.default.PropTypes.bool,
  onSubmit: _react2.default.PropTypes.func.isRequired,
  onSubmitExtra: _react2.default.PropTypes.object,
  schema: _react2.default.PropTypes.object.isRequired,
  type: _react2.default.PropTypes.oneOf(['update', 'insert']),
  useFields: _react2.default.PropTypes.array
};

ReactAutoForm.defaultProps = {
  buttonProps: {},
  debug: false,
  errors: false,
  formClass: 'autoform',
  formStyle: {},
  onSubmitExtra: {},
  type: 'insert',
  muiTheme: false
};

ReactAutoForm.childContextTypes = {
  muiTheme: _react2.default.PropTypes.object
};

exports.default = ReactAutoForm;